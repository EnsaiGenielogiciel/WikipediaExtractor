"","throw","handler","assertion"
"Ada","raiseexception_name«withstring_expression»","beginstatementsexceptionwhenexception_list1=>statements;whenexception_list2=>statements;...«whenothers=>statements;»end","pragmaAssert(«Check=>»boolean_expression««Message=>»string_expression»)[function|procedure|entry]withPre=>boolean_expressionPost=>boolean_expressionany_typewithType_Invariant=>boolean_expression"
"APL","«string_expression»?SIGNALnumber_expression",":Trapnumber«s»_expressionstatements«:Casenumber«s»_expressionstatements»...«:Elsenumber«s»_expressionstatements»:EndTrap","«string_expression»?SIGNAL98/?~condition"
"C(C99)","longjmp(state,exception);","switch(setjmp(state)){case0:instructionsbreak;caseexception:instructions...}","assert(condition);"
"C++","throwexception;","try{instructions}catch«(exception)»{instructions}...","assert(condition);"
"C#","throwexception;","try{instructions}catch«(exception«name»)»{instructions}...«finally{instructions}»","System.Diagnostics.Debug.Assert(condition);orSystem.Diagnostics.Trace.Assert(condition);"
"Java","throwexception;","try{instructions}catch(exception){instructions}...«finally{instructions}»","assertcondition«:description»;"
"JavaScript","throwexception;","try{instructions}catch(exception){instructions}«finally{instructions}»","?"
"D","throwexception;","try{instructions}catch(exception){instructions}...«finally{instructions}»","assert(condition);"
"PHP","throwexception;","try{instructions}catch(exception){instructions}...«finally{instructions}»","assert(condition);"
"S-Lang","throwexception;","try{instructions}catch«exception»{instructions}...«finally{instructions}»","?"
"WindowsPowerShell","throwexception;","trap«[exception]»{instructions}...instructionsortry{instructions}catch«[exception]»{instructions}...«finally{instructions}»","[Debug]::Assert(condition)"
"Objective-C","@throwexception;","@try{instructions}@catch(exception){instructions}...«@finally{instructions}»","NSAssert(condition,description);"
"Swift","throwexception(2.x)","do{tryexpression...instructions}catchexception{instructions}...(2.x)","assert(condition«,description»)"
"Perl","dieexception;","eval{instructions};if($@){instructions}","?"
"Raku","dieexception;","try{instructionsCATCH{whenexception{instructions}...}}","?"
"Ruby","raiseexception","begininstructionsrescueexceptioninstructions...«elseinstructions»«ensureinstructions»end",""
"Smalltalk","exceptionraise","instructionBlockon:exceptiondo:handlerBlock","assert:conditionBlock"
"CommonLisp","(error""exception"")or(errortypearguments)or(error(make-conditiontypearguments))","(handler-case(progninstructions)(exceptioninstructions)...)or(handler-bind(condition(lambdainstructions«invoke-restartrestartargs»))...)","(assertcondition)or(assertcondition«(place)«error»»)or(check-typevartype)"
"Scheme(RRS)","(raiseexception)","(guard(con(conditioninstructions)...)instructions)","?"
"ISLISP","(error""error-string""objects)or(signal-conditionconditioncontinuable)","(with-handlerhandlerform*)","?"
"Pascal","raiseException.Create()","tryExceptonE:exceptiondobegininstructionsend;end;","?"
"VisualBasic","Err.RaiseERRORNUMBER","WithNewTry:OnErrorResumeNextOneInstruction.Catch:OnErrorGoTo0:SelectCase.NumberCaseSOME_ERRORNUMBERinstructionsEndSelect:EndWith'***Tryclass***PrivatemstrDescriptionAsStringPrivatemlngNumberAsLongPublicSubCatch()mstrDescription=Err.DescriptionmlngNumber=Err.NumberEndSubPublicPropertyGetNumber()AsLongNumber=mlngNumberEndPropertyPublicPropertyGetDescription()AsStringDescription=mstrDescriptionEndProperty","Debug.Assertcondition"
"VisualBasic.NET","ThrowexceptionorErrorerrorcode","TryinstructionsCatch«nameAsexception»«Whencondition»instructions...«Finallyinstructions»EndTry","System.Diagnostics.Debug.Assert(condition)orSystem.Diagnostics.Trace.Assert(condition)"
"Xojo","Raiseexception","TryinstructionsCatch«exception»instructions...«Finallyinstructions»EndTry","N/A"
"Python","raiseexception","try:Tab?instructionsexcept«exception»:Tab?instructions...«else:Tab?instructions»«finally:Tab?instructions»","assertcondition"
"Fortran","N/A","N/A","N/A"
"Forth","codeTHROW","xtCATCH(codeor0)","N/A"
"OCaml","raiseexception","tryexpressionwithpattern->expression...","assertcondition"
"F#","raiseexception","tryexpressionwithpattern->expression...ortryexpressionfinallyexpression","assertcondition"
"StandardML","raiseexception«arg»","expressionhandlepattern=>expression...",""
"Haskell(GHC)","throwexceptionorthrowErrorexpression","catchtryExpressioncatchExpressionorcatchErrortryExpressioncatchExpression","assertconditionexpression"
"COBOL","RAISE«EXCEPTION»exception","USE«AFTER»EXCEPTIONOBJECTclass-name.orUSE«AFTER»EOclass-name.orUSE«AFTER»EXCEPTIONCONDITIONexception-name«FILEfile-name».orUSE«AFTER»ECexception-name«FILEfile-name».","N/A"
"Rust","No","No","assert!(condition)"
