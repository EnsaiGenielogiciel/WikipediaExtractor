"","Simplecompositetypes","Simplecompositetypes","Algebraicdatatypes","Unions"
"","Records","Algebraicdatatypes","Unions","Tupleexpression"
"Ada","typenameis«abstract»«tagged»«limited»[recordfield1:type;field2:type;...endrecord|nullrecord]","N/A","Anycombinationofrecords,unionsandenumerations(aswellasreferencestothose,enablingrecursivetypes).","typename(variation:discrete_type)isrecordcasevariationiswhenchoice_list1=>fieldname1:type;...whenchoice_list2=>fieldname2:type;......endcase;endrecord"
"ALGOL68","struct(modename«fieldname»,...);","Requiredtypesandoperatorscanbeuserdefined","Requiredtypesandoperatorscanbeuserdefined","union(modename,...);"
"C(C99)","struct«name»{typename;...};","N/A","N/A","union{typename;...};"
"Objective-C","struct«name»{typename;...};","N/A","N/A","union{typename;...};"
"C++","struct«name»{typename;...};","«std::»tuple<type1..typen>","N/A","union{typename;...};"
"C#","structname{typename;...}","(val1,val2,...)","","N/A"
"Java","N/A","","","N/A"
"JavaScript","","N/A","","N/A"
"D","structname{typename;...}","","std.variant.Algebraic!(type,...)","union{typename;...}"
"Go","struct{«name»type...}","","",""
"Rust","structname{name:type,...}","(val1,val2,...)","enumname{Foo(types),...}","unionname{name:type,...}"
"Swift","structname{varname«:type»...}","(«name1:»val1,«name2:»val2,«name3:»val3,...)","enumname{caseFoo«(types)»caseBar«(types)»...}",""
"CommonLisp","(defstructnameslot-name(slot-nameinitial-value)(slot-nameinitial-value:typetype)...)","(consval1val2)","",""
"Scheme","N/A","(consval1val2)","",""
"ISLISP","","(consval1val2)","",""
"Pascal","recordname:type;...end","N/A","N/A","recordcasetypeofvalue:(types);...end"
"VisualBasic","","","",""
"VisualBasic.NET","StructurenameDimnameAstype...EndStructure","(val1,val2,...)","",""
"Python","N/A","«(»val1,val2,val3,...«)»","","N/A"
"S-Lang","struct{name[=value],...}","","",""
"Fortran","TYPEnametype::name...ENDTYPE","","",""
"PHP","N/A","","",""
"Perl","N/A","","","N/A"
"Raku","N/A","","","N/A"
"Ruby","OpenStruct.new({:name=>value})","","","N/A"
"Scala","caseclassname(«var»name:type,...)","(val1,val2,val3,...)","abstractclassnamecaseclassFoo(«parameters»)extendsnamecaseclassBar(«parameters»)extendsname...orabstractclassnamecaseobjectFooextendsnamecaseobjectBarextendsname...orcombinationofcaseclassesandcaseobjects",""
"WindowsPowerShell","","","",""
"OCaml","typename={«mutable»name:type;...}","«(»val1,val2,val3,...«)»","typename=Foo«oftype»|Bar«oftype»|...","N/A"
"F#","typename={«mutable»name:type;...}","«(»val1,val2,val3,...«)»","typename=Foo«oftype»|Bar«oftype»|...","N/A"
"StandardML","typename={name:type,...}","(val1,val2,val3,...)","datatypename=Foo«oftype»|Bar«oftype»|...","N/A"
"Haskell","dataName=Constr{name::type,...}","(val1,val2,val3,...)","dataName=Foo«types»|Bar«types»|...","N/A"
"COBOL","level-numbernametypeclauses.level-number+nnametypeclauses....","N/A","N/A","nameREDEFINESvariabletype."
