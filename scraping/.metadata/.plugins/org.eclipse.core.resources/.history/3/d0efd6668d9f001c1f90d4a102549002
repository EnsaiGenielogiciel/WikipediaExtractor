package wikipediaScraping;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import com.opencsv.CSVWriter;

import java.io.FileWriter;

public class WikipediaHTMLExtractor {

	private String link;
	private Elements tables;
	
	public WikipediaHTMLExtractor(String lien) {
		this.link = lien;
		this.tables = null;
	}
	
	// Getters and setters	
	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	public Elements getTables() {
		return tables;
	}

	public void setTables(Elements tables) {
		this.tables = tables;
	}
	//


	// check if the cast of string allow to obtain and integer
    public boolean isNumeric(String str) { 
		  try {  
		    Integer.parseInt(str);  
		    return true;
		  } catch(NumberFormatException e){  
		    return false;  
		  }  
		}
   
    
    // requests the webpage, parse it and select <table> element
    public void htmlParser() throws IOException{
    	
    	try {
    		String url = "https://en.wikipedia.org/wiki/" + this.link;
    		Document response = Jsoup.connect(url).get();
    		Elements tables = response.select("table[class *= wikitable]");  // select table which attribute 'class' contain wikitable
    		
    		this.tables = tables.size()>0 ? tables : null;
    	
    	}catch(Exception ex){
    		System.out.println("Page indisponible !!");
    	}
    }
    
    //
    
    // Build and save the csv file in a /src/main/ressources directory
    public void CSVFile(List<ArrayList<String>> row, String name_file) throws IOException {
	   
		List<String[]> list = new ArrayList<>();
		for (ArrayList<String> elt : row) {
			
			String[] array = new String[elt.size()];
			
			for(int i=0 ; i<elt.size(); i++) {
				//System.out.println(elt.get(i));
				array[i] = elt.get(i);
			}
			
		    System.out.println(array[0]);
			list.add(array);
		}
		
		
		
		Path resourceDirectory = Paths.get("src","main","resources","csvdata");
		String absolutePath = resourceDirectory.toFile().getAbsolutePath()+"\\"+name_file+".csv";
		
		System.out.println(absolutePath);
        try (CSVWriter writer = new CSVWriter(new FileWriter(absolutePath))) {
            writer.writeAll(list);
        }catch(IOException e) {
        	System.out.println("unsaved file");
        }
    }
    
    //remove sup

    
    //build data
	public void Scraper(boolean fillspan) throws IOException {
		
		if (this.tables != null) {
			
			int table_index = -1;
			
			for(Element tab: this.tables) {
				
				table_index++;
				
				List<ArrayList<String>> row_data = new ArrayList<ArrayList<String>>();
				
				Elements soup_tr = tab.select("tbody tr"); 
				
				if (soup_tr.size()!=0) {
					
					for(int row_num=0; row_num<soup_tr.size(); row_num++) {
						
						ArrayList<String> table_row = new ArrayList<String>();
						
						for(Element cell : soup_tr.get(row_num).select("th , td")) {
						
							table_row.add(cell.text().replaceAll("[\\n\\t ]", ""));
						}
						
						row_data.add(table_row);			
					}
					
					
					for(int row_num=0; row_num<soup_tr.size(); row_num++) {
						
						int cell_num =-1;
						
						for(Element cell : soup_tr.get(row_num).select("th , td")) {
							
							cell_num++;
							
							//colspan
							if(cell.hasAttr("colspan") && isNumeric(cell.attr("colspan"))) {
								
								int colspan = Integer.parseInt(cell.attr("colspan"));
								
								for (int k=1; k<colspan; k++) {
									
									// ajouter à l'intérieur si size<cell_num sinon à la fin
									if(row_data.get(row_num).size()>=cell_num){
										row_data.get(row_num).add(cell_num, fillspan ? cell.text().replaceAll("[\\n\\t ]", "") : "");
									}else {
										row_data.get(row_num).add(fillspan ? cell.text().replaceAll("[\\n\\t ]", "") : "");
									}
								}
							}
							
							//rowspan				
							if(cell.hasAttr("rowspan") && isNumeric(cell.attr("rowspan"))) {
								
								int rowspan = Integer.parseInt(cell.attr("rowspan"));
								
								for (int k=1; k<rowspan; k++) {	
			
									// ajouter à l'intérieur si size<cell_num sinon à la fin
									if (row_data.get(row_num+k).size()>=cell_num) {
										row_data.get(row_num+k).add(cell_num, fillspan ? cell.text().replaceAll("[\\n\\t ]", "") : "");
									}else {
										row_data.get(row_num+k).add(fillspan ? cell.text().replaceAll("[\\n\\t ]", "") : "");
									}
								
								}
								
							}
						
						}
							
					}
				}
				//save file
				CSVFile(row_data, this.link+String.valueOf(table_index));
			}
		
		}else{
			System.out.println("empty element in soup parser");
		}
			
	 }
	
}
