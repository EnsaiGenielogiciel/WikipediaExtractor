"Format","Languages"
"string1OPstring2,whereOPcanbeanyof=,<>,<,>,<=and>=","Pascal,ObjectPascal(Delphi),OCaml,Seed7,StandardML,BASIC,VB,VB.NET,F#"
"string1OPstring2,whereOPcanbeanyof=,/=,≠,<,>,<=,≤and≥;Also:EQ,NE,LT,LE,GEandGT","ALGOL68"
"(stringOP?string1string2),whereOPcanbeanyof=,-ci=,<,-ci<,>,-ci>,<=,-ci<=,>=and-ci>=(operatorsstartingwith'-ci'arecase-insensitive)","Scheme"
"(stringOPstring1string2),whereOPcanbeanyof=,-ci=,<>,-ci<>,<,-ci<,>,-ci>,<=,-ci<=,>=and-ci>=(operatorsstartingwith'-ci'arecase-insensitive)","Scheme(SRFI13)"
"(stringOPstring1string2),whereOPcanbeanyof=,-equal,/=,-not-equal,<,-lessp,>,-greaterp,<=,-not-greaterp,>=and-not-lessp(theverbaloperatorsarecase-insensitive)","CommonLisp"
"(stringOPstring1string2),whereOPcanbeanyof=,/=,<,>,<=,and>=","ISLISP"
"string1OPstring2,whereOPcanbeanyof=,\=,<,>,<=and>=","Rexx"
"string1OPstring2,whereOPcanbeanyof=,¬=,<,>,<=,>=,¬<and¬>","PL/I"
"string1OPstring2,whereOPcanbeanyof=,/=,<,>,<=and>=","Ada"
"string1OPstring2,whereOPcanbeanyof==,/=,<,>,=<and>=","Erlang"
"string1OPstring2,whereOPcanbeanyof==,/=,<,>,<=and>=","Haskell"
"string1OPstring2,whereOPcanbeanyofeq,ne,lt,gt,leandge","Perl,Raku"
"string1OPstring2,whereOPcanbeanyof==,!=,<,>,<=and>=","C++(STL),C#,D,Go,JavaScript,Python,PHP,Ruby,Rust,Swift"
"string1OPstring2,whereOPcanbeanyof-eq,-ceq,-ne,-cne,-lt,-clt,-gt,-cgt,-le,-cle,-ge,and-cge(operatorsstartingwith'c'arecase-sensitive)","WindowsPowerShell"
"string1OPstring2,whereOPcanbeanyof==,~=,<,>,<=and>=","Lua"
"string1OPstring2,whereOPcanbeanyof=,~=,<,>,<=and>=","Smalltalk"
"string1OPstring2,whereOPcanbeanyof==,/=,<,>,<=and>=;Also:.EQ.,.NE.,.LT.,.LE.,.GT.and.GE.","Fortran."
"string1OPstring2whereOPcanbeanyof=,<>,<,>,<=,>=aswellaswordedequivalents","COBOL"
"string1OPstring2whereOPcanbeanyof==,<>,<,>,<=and>=","Cobra"
"string1OPstring2isavailableinthesyntax,butmeanscomparisonofthepointerspointingtothestrings,notofthestringcontents.UsetheCompare(integerresult)function.","C,Java"
"string1.METHOD(string2)whereMETHODisanyofeq,ne,gt,lt,ge,le","Rust"
